
/*
 * ArrayPassenger.h
 *
 *  Created on: 11 may. 2022
 *      Author: RYZEN 2700X
 */

#ifndef ARRAYPASSENGER_H_
#define ARRAYPASSENGER_H_

#define VACIO 1
#define OCUPADO 0

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

typedef struct
	{
		int id;
		char name[51];
		char lastname[51];
		float price;
		char flycode[10];
		int idStatusFlight;
		int idTypePassenger;
		int isEmpty;

	}sPassenger;

	/// @brief Incia todos los espacios en vacío, para la carga.
	///
	/// @param list La lista de pasajeros.
	/// @param len El tamaño de la lista.
	/// @return Retorna los lugares vacíos.
	int initPassengers(sPassenger list[], int len);

	/// @brief Busca un pasajero por ID.
	///
	/// @param list La lista de pasajeros.
	/// @param len El tamaño de esta.
	/// @param id El ID.
	/// @return Retorna el id.
	int findPassengerById(sPassenger list[], int len,int id);

	/// @brief Para eliminar un pasajero.
	///
	/// @param list La lista de pasajeros.
	/// @param len El tamaño de esta.
	/// @param id El ID.
	/// @return Retorna si se pudo eliminar o no el pasajero.
	int removePassenger(sPassenger list[], int len, int id);

	/// @brief Acomoda los pasajeros por apellido y tipo de pasajero.
	///
	/// @param passengerList La lista de pasajeros.
	/// @param size El tamaño de esta.
	/// @param order El orden (si ascendente o descendente).
	/// @return Retorna ordenada la lista de manera ascendente o descendente.
	int sortPassengers(sPassenger passengerList[], int size, int order);

	/// @brief Ordena los pasajeros por el código de vuelo y si el estado es "Activo" (en horario o en curso).
	///
	/// @param list La lista de pasajeros.
	/// @param len El tamaño de esta.
	/// @param order El orden (si ascendente o descendente)
	/// @return Retorna ordenada la lista de manera ascendente o descendente.
	int sortPassengersByCode(sPassenger list[], int len, int order);

	/// @brief Muestra la id y la descripción de los estados de vuelo.
	///
	/// @param statusFlight La estructura de estados de vuelo.
	/// @param size El tamaño de esta.
	void StatusFlight(sStatusFlight statusFlight[], int size);

	/// @brief Muestra la id y la descripción del tipo de pasajero.
	///
	/// @param typePassenger La estructura del tipo de vuelo.
	/// @param size El tamaño de esta.
	void TypePassenger(sTypePassenger typePassenger[], int size);

	/// @brief Busca si hay algún espacio ocupado para que no pueda hacer nada sin cargar 1 pasajero.
	///
	/// @param list La lista de pasajeros.
	/// @param size El tamaño de esta.
	/// @return Retorna si encontró algún espacio ocupado.
	int BuscarEspacioOcupado(sPassenger list[], int size);

	/// @brief La función en que se valida si algún pasajero superó el promedio de viajes.
	///
	/// @param list La lista de pasajeros.
	/// @param size El tamaño de esta.
	/// @return Retorna si algún pasajero pudo o no superar el promedio.
	float SuperarPromedio(sPassenger list[], int size);

	/// @brief Muestra los precios en base al promedio.
	///
	/// @param list La lista de pasajeros.
	/// @param size El tamaño de esta.
	/// @param statusFlight La estructura del estado de vuelo.
	/// @param segundoSize El tamaño de esta.
	/// @param typePassenger La estructura del tipo de pasajero.
	/// @param tercerSize El tamaño de esta.
	void MostrarPreciosEnBaseAlPromedio(sPassenger list[], int size, sStatusFlight statusFlight[],
									   int segundoSize, sTypePassenger typePassenger[], int tercerSize);

	/// @brief Hace la carga forzada de 5 pasajeros.
	///
	/// @param list La lista de pasajeros.
	/// @param size El tamaño de esta.
	void CargaForzada (sPassenger list[], int size);

	/// @brief Muestra los vuelos que están solo en horario o en curso.
	///
	/// @param passengerList La lista de pasajeros.
	/// @param size El tamaño de esta.
	/// @param statusFlight La estructura del estado de vuelo.
	/// @param sizeStatus El tamaño de esta.
	/// @param typePassenger La estructura del tipo de pasajero.
	/// @param sizeType El tamaño de esta.
	/// @return Retorna los pasajeros en horario y en curso.
	int MostrarEnHorarioYEnCurso(sPassenger passengerList[], int size, sStatusFlight statusFlight[],
								 int sizeStatus, sTypePassenger typePassenger[], int sizeType);
#endif /* ARRAYPASSENGER_H_ */
