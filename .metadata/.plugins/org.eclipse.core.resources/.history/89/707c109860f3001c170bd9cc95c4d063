#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../inc/LinkedList.h"


static Node* getNode(LinkedList* this, int nodeIndex);
static int addNode(LinkedList* this, int nodeIndex,void* pElement);

/** \brief Crea un nuevo LinkedList en memoria de manera dinamica
 *
 *  \param void
 *  \return LinkedList* Retorna (NULL) en el caso de no conseguir espacio en memoria
 *                      o el puntero al espacio reservado
 */
LinkedList* ll_newLinkedList(void)
{
    LinkedList* this= NULL;

    this = (LinkedList*) malloc(sizeof(LinkedList));

    if(this != NULL)
    {
    	this -> pFirstNode = NULL; //Final en NULL.
    	this -> size = 0; //Tamaño en 0.
    }

    return this;
}

/** \brief Retorna la cantidad de elementos de la lista
 *
 * \param this LinkedList* Puntero a la lista
 * \return int Retorna (-1) si el puntero es NULL o la cantidad de elementos de la lista
 *
 */
int ll_len(LinkedList* this)
{
    int returnAux = -1;

    if(this != NULL)
    {
    	returnAux = this ->size; //El tamaño que voy a devolver.
    }

    return returnAux;
}


/** \brief  Obtiene un nodo de la lista
 *
 * \param this LinkedList* Puntero a la lista
 * \param index int Indice del nodo a obtener
 * \return Node* Retorna  (NULL) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                        (pNode) Si funciono correctamente
 *
 */
static Node* getNode(LinkedList* this, int nodeIndex)
{
	Node* pNode = NULL;

	if(this != NULL && nodeIndex > -1 && nodeIndex < ll_len(this))
	{
		pNode = this -> pFirstNode; //Se asigna el primer nodo.

		for(int i = 0; i < nodeIndex; i++) //Se recorre en base a la cantidad ingresada.
		{
			pNode = pNode -> pNextNode; //Recorre todos hasta el último.
		}
	}

    return pNode;
}

/** \brief  Permite realizar el test de la funcion getNode la cual es privada
 *
 * \param this LinkedList* Puntero a la lista
 * \param index int Indice del nodo a obtener
 * \return Node* Retorna  (NULL) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                        (pElement) Si funciono correctamente
 *
 */
Node* test_getNode(LinkedList* this, int nodeIndex)
{
    return getNode(this, nodeIndex);
}


/** \brief Agrega y enlaza un nuevo nodo a la lista
 *
 * \param this LinkedList* Puntero a la lista
 * \param nodeIndex int Ubicacion donde se agregara el nuevo nodo
 * \param pElement void* Puntero al elemento a ser contenido por el nuevo nodo
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                        ( 0) Si funciono correctamente
 *
 */
static int addNode(LinkedList* this, int nodeIndex,void* pElement)
{
    int returnAux = -1;
    Node* pNodeNuevo = NULL;
    Node* pNodeAnterior = NULL;

    if(this != NULL && nodeIndex > -1 && nodeIndex <= ll_len(this))
    {
    	pNodeNuevo = (Node*) malloc(sizeof(Node));

    	if(pNodeNuevo != NULL)
    	{
    		pNodeNuevo -> pElement = pElement;

    		if(nodeIndex == 0) //Si es el primer nodo lo asigno al nuevo nodo creado.
    		{
    			pNodeNuevo -> pNextNode = this -> pFirstNode;
    			this ->pFirstNode = pNodeNuevo;
    		}
    		else
    		{
    			pNodeAnterior = getNode(this, nodeIndex-1); //El nodo anterior a donde lo voy a agregar. (Por eso el -1)

    			if(pNodeAnterior != NULL)
    			{
    				pNodeNuevo -> pNextNode = pNodeAnterior -> pNextNode; //El nuevo nodo va a pasar a apuntar a lo que apuntaba el anterior.
    				pNodeAnterior -> pNextNode = pNodeNuevo; //El anterior nodo apunta al nuevo.
    			}
    		}
    		this -> size++;
    		returnAux = 0;
    	}
    }

    return returnAux;
}

/** \brief Permite realizar el test de la funcion addNode la cual es privada
 *
 * \param this LinkedList* Puntero a la lista
 * \param nodeIndex int Ubicacion donde se agregara el nuevo nodo
 * \param pElement void* Puntero al elemento a ser contenido por el nuevo nodo
  * \return int Retorna  (-1) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                        ( 0) Si funciono correctamente
 *
 */
int test_addNode(LinkedList* this, int nodeIndex,void* pElement)
{
    return addNode(this,nodeIndex,pElement);
}


/** \brief  Agrega un elemento a la lista
 * \param pList LinkedList* Puntero a la lista
 * \param pElement void* Puntero al elemento a ser agregado
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL
                        ( 0) Si funciono correctamente
 *
 */
int ll_add(LinkedList* this, void* pElement)
{
    int returnAux = -1;

    if(this != NULL)
    {
    	returnAux = addNode(this, ll_len(this), pElement);
    }

    return returnAux;
}

/** \brief Permite realizar el test de la funcion addNode la cual es privada
 *
 * \param this LinkedList* Puntero a la lista
 * \param nodeIndex int Ubicacion del elemento a obtener
 * \return void* Retorna    (NULL) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                            (pElement) Si funciono correctamente
 *
 */
void* ll_get(LinkedList* this, int index)
{
    void* returnAux = NULL;
    Node* pNode = NULL;

    if(this != NULL && index > -1)
    {
    	if(index < ll_len(this))
    	{
    		pNode = getNode(this, index);

    		if(pNode != NULL)
    		{
    			returnAux = pNode -> pElement;
    		}
    	}
    }

    return returnAux;
}


/** \brief Modifica un elemento de la lista
 *
 * \param this LinkedList* Puntero a la lista
 * \param nodeIndex int Ubicacion del elemento a modificar
 * \param pElement void* Puntero al nuevo elemento
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                        ( 0) Si funciono correctamente
 *
 */
int ll_set(LinkedList* this, int index,void* pElement)
{
    int returnAux = -1;
    Node* pNode = NULL;

    if(this != NULL && index > -1)
    {
    	if(index < ll_len(this))
    	{
			pNode = getNode(this, index);

			if(pNode != NULL)
			{
				pNode -> pElement = pElement;
				returnAux = 0;
			}
    	}
    }

    return returnAux;
}


/** \brief Elimina un elemento de la lista
 *
 * \param this LinkedList* Puntero a la lista
 * \param nodeIndex int Ubicacion del elemento a eliminar
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                        ( 0) Si funciono correctamente
 *
 */
int ll_remove(LinkedList* this,int index)
{
    int returnAux = -1;
    int size;
    Node* pNodeAuxiliar = NULL;
    Node* pNodeAnterior = NULL;

    if(this != NULL && index >= 0)
    {
    	size = ll_len(this);

    	if(index < size)
    	{
    		pNodeAuxiliar = getNode(this, index); //Se busca el nodo a eliminar.

    		if(pNodeAuxiliar != NULL)
    		{
    			if(index == 0) //Si es la primer posición.
    			{
    				this -> pFirstNode = pNodeAuxiliar -> pNextNode; //Paso el próximo nodo y se libera el pedido.
    			}
    			else
    			{
    				pNodeAnterior = getNode(this, index-1);

    				if(pNodeAnterior != NULL)
    				{
    					pNodeAnterior -> pNextNode = pNodeAuxiliar -> pNextNode; //Se le pasa al nodo anterior la dirección del siguiente nodo al que apuntaba el pedido a eliminar.
    				}
    			}
    			free(pNodeAuxiliar);
				this -> size--;
				returnAux = 0;
    		}
    	}
    }

    return returnAux;
}


/** \brief Elimina todos los elementos de la lista
 *
 * \param this LinkedList* Puntero a la lista
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL
                        ( 0) Si funciono correctamente
 *
 */
int ll_clear(LinkedList* this)
{
    int returnAux = -1;
    if(this != NULL)
    {
    	if(!ll_isEmpty(this)) //Si existe la lista.
    	{
    		for(int i = 0; i < ll_len(this); i++)
    		{
    			ll_remove(this, 0); //Se borran todos los nodos hasta el final del size.
    			//this -> size --;
    			returnAux = 0;
    		}
    	}
    }
    return returnAux;
}


/** \brief Elimina todos los elementos de la lista y la lista
 *
 * \param this LinkedList* Puntero a la lista
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL
                        ( 0) Si funciono correctamente
 *
 */
int ll_deleteLinkedList(LinkedList* this)
{
    int returnAux = -1;

    if(this != NULL)
    {
    	if(!ll_clear(this))
    	{
    		free(this);
    		returnAux = 0;
    	}
    }

    return returnAux;
}

/** \brief Busca el indice de la primer ocurrencia del elemento pasado como parametro
 *
 * \param this LinkedList* Puntero a la lista
 * \param pElement void* Puntero al elemento
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL
                        (indice del elemento) Si funciono correctamente
 *
 */
int ll_indexOf(LinkedList* this, void* pElement)
{
    int returnAux = -1;
    Node* pNode = NULL;

    if(this != NULL)
    {
    	if(!ll_isEmpty(this))
    	{
    		for(int i = 0; i < ll_len(this); i++)
    		{
    			pNode = getNode(this, i); //Se obtiene el nodo de la posición i.
    			if(pNode != NULL && pNode -> pElement == pElement)
    			{
    				returnAux = i;
    				break;
    			}
    		}
    	}
    }

    return returnAux;
}

/** \brief Indica si la lista esta o no vacia
 *
 * \param this LinkedList* Puntero a la lista
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL
                        ( 0) Si la lista NO esta vacia
                        ( 1) Si la lista esta vacia
 *
 */
int ll_isEmpty(LinkedList* this)
{
    int returnAux = -1;
    int size;

    if(this != NULL)
    {
    	size = ll_len(this);
    	returnAux = 1; //Si está vacía.

    	if(size > 0)
    	{
    		returnAux = 0; //Si no está vacía.
    	}
    }

    return returnAux;
}

/** \brief Inserta un nuevo elemento en la lista en la posicion indicada
 *
 * \param this LinkedList* Puntero a la lista
 * \param nodeIndex int Ubicacion donde se agregara el nuevo elemento
 * \param pElement void* Puntero al nuevo elemento
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                        ( 0) Si funciono correctamente
 *
 */
int ll_push(LinkedList* this, int index, void* pElement)
{
    int returnAux = -1;

    if(this != NULL && index > -1 && index <= ll_len(this))
    {
    	returnAux = addNode(this, index, pElement);
    }

    return returnAux;
}


/** \brief Elimina el elemento de la posicion indicada y retorna su puntero
 *
 * \param this LinkedList* Puntero a la lista
 * \param nodeIndex int Ubicacion del elemento eliminar
 * \return void* Retorna    (NULL) Error: si el puntero a la lista es NULL o (si el indice es menor a 0 o mayor al len de la lista)
                            (pElement) Si funciono correctamente
 *
 */
void* ll_pop(LinkedList* this,int index)
{
    void* returnAux = NULL;
    void* pAuxiliar = NULL;

    if(this != NULL && index > -1 && index < ll_len(this))
    {
    	pAuxiliar = ll_get(this, index); //Se guarda el elemento en el auxiliar.

    	if(!ll_remove(this, index)) //Si se remueve, se devuelve.
    	{
    		returnAux = pAuxiliar;
    	}
    }

    return returnAux;
}


/** \brief  Determina si la lista contiene o no el elemento pasado como parametro
 *
 * \param this LinkedList* Puntero a la lista
 * \param pElement void* Puntero del elemento a verificar
 * \return int Retorna  (-1) Error: si el puntero a la lista es NULL
                        ( 1) Si contiene el elemento
                        ( 0) si No contiene el elemento
*/
int ll_contains(LinkedList* this, void* pElement)
{
    int returnAux = -1;

    if(this != NULL)
    {
    	returnAux = 0; //No está en la lista.

    	if(!ll_isEmpty(this))
    	{
    		for(int i = 0; i < ll_len(this); i++)
    		{
    			if(ll_indexOf(this, pElement) == i)
    			{
    				returnAux = 1; //Está en la lista.
    			}
    		}
    	}
    }

    return returnAux;
}

/** \brief  Determina si todos los elementos de la lista (this2)
            estan contenidos en la lista (this)
 *
 * \param this LinkedList* Puntero a la lista
 * \param this2 LinkedList* Puntero a la lista
 * \return int Retorna  (-1) Error: si alguno de los punteros a las listas son NULL
                        ( 1) Si los elementos de (this2) estan contenidos en la lista (this)
                        ( 0) si los elementos de (this2) NO estan contenidos en la lista (this)
*/
int ll_containsAll(LinkedList* this,LinkedList* this2)
{
    int returnAux = -1;
    void* pElement = NULL;

    if(this != NULL && this2 != NULL)
    {
    	returnAux = 1;

    	if(!ll_isEmpty(this) && !ll_isEmpty(this2))
    	{
    		for(int i = 0; i < ll_len(this2); i++) //Se recorre el segundo this.
    		{
    			pElement = ll_get(this2, i);

    			if(pElement != NULL)
    			{
    				if(!ll_contains(this, pElement)) //Se compara si el elemento está incluido en el primer this.
    				{
    					returnAux = 0;
    					break; //Una vez que se sabe que al menos uno no está incluido, rompe.
    				}
    			}
    		}
    	}
    }

    return returnAux;
}

/** \brief Crea y retorna una nueva lista con los elementos indicados
 *
 * \param pList LinkedList* Puntero a la lista
 * \param from int Indice desde el cual se copian los elementos en la nueva lista
 * \param to int Indice hasta el cual se copian los elementos en la nueva lista (no incluido)
 * \return LinkedList* Retorna  (NULL) Error: si el puntero a la listas es NULL
                                o (si el indice from es menor a 0 o mayor al len de la lista)
                                o (si el indice to es menor o igual a from o mayor al len de la lista)
                         (puntero a la nueva lista) Si ok
*/
LinkedList* ll_subList(LinkedList* this,int from,int to)
{
    LinkedList* cloneArray = NULL;
    void* pElement = NULL;

    if(this != NULL && from >= 0 && to >= 0 && from <= ll_len(this) && to <= ll_len(this))
    {
    	cloneArray = ll_newLinkedList(); //Se genera el espacio en memoria dinámica.

    	if(cloneArray != NULL)
    	{
    		for(int i = from; i < to; i++) //Desde from hasta to.
    		{
    			pElement = ll_get(this, i); //Se guarda el elemento de la lista principal en la posición i en un auxiliar.
    			ll_add(cloneArray, pElement); //Se añade ese elemento a la nueva lista.
    		}
    	}
    }

    return cloneArray;
}



/** \brief Crea y retorna una nueva lista con los elementos de la lista pasada como parametro
 *
 * \param pList LinkedList* Puntero a la lista
 * \return LinkedList* Retorna  (NULL) Error: si el puntero a la listas es NULL
                                (puntero a la nueva lista) Si ok
*/
LinkedList* ll_clone(LinkedList* this)
{
    LinkedList* cloneArray = NULL;

    if(this != NULL)
    {
    	cloneArray = ll_subList(this, 0, ll_len(this)); //Desde el primero al último.
    }

    return cloneArray;
}


/** \brief Ordena los elementos de la lista utilizando la funcion criterio recibida como parametro
 * \param pList LinkedList* Puntero a la lista
 * \param pFunc (*pFunc) Puntero a la funcion criterio
 * \param order int  [1] Indica orden ascendente - [0] Indica orden descendente
 * \return int Retorna  (-1) Error: si el puntero a la listas es NULL
                                ( 0) Si ok
 */
int ll_sort(LinkedList* this, int (*pFunc)(void* ,void*), int order)
{
    int returnAux =-1;
    int size;

    void* pElementI = NULL;
    void* pElementJ = NULL;

    if(this != NULL && (order == 1 || order == 0) && pFunc != NULL)
    {
    	size = ll_len(this);

    	for(int i = 0; i < size - 1; i++)
    	{
    		for(int j = i + 1; j < size; j++)
    		{
    			pElementI = ll_get(this, i); //Se obtiene el primer elemento de la iteración.
    			pElementJ = ll_get(this, j); //Se obtiene el segundo elemento de la iterración.

    			if(pFunc(pElementI, pElementJ) > 0 && order == 1) //Si el primer elemento es menor al segundo elemento, orden ascendente.
    			{
    				ll_set(this, i, pElementJ); //Se pone el menor.
    				ll_set(this, j, pElementI);
    				returnAux = 0;
    			}
    			else
    			{
    				if(pFunc(pElementI, pElementJ) <= 0 && order == 0) //Si el primer elemento es menor al segundo elemento, orden descendente.
    				{
    					ll_set(this, i, pElementJ);
    					ll_set(this, j, pElementI);
    					returnAux = 0;
    				}
    			}
    		}
    	}
    }

    return returnAux;

}
