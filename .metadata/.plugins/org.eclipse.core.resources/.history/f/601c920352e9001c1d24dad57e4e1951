/*
 * Passenger.h
 *
 *  Created on: 19 may. 2022
 *
 */

#ifndef PASSENGER_H_
#define PASSENGER_H_
#include "LinkedList.h"

typedef struct
{
	int id;
	char nombre[50];
	char apellido[50];
	float precio;
	char tipoPasajero[20];
	char codigoVuelo[20];
	char estadoVuelo[20];

}Passenger;
/// @brief Constructor genérico de pasajero.
///
/// @return Retorna el pasajero cargado en memoria dinámica.
Passenger* Passenger_new();
/// @brief Constructor parametrizado.
///
/// @param idStr id cadena.
/// @param nombreStr nombre cadena.
/// @param codigoStr codigo cadena.
/// @param apellidoStr apellido cadena.
/// @param precioStr precio cadena.
/// @param tipoPasajeroStr tipo de pasajero cadena.
/// @param statusFlightStr estado de vuelo cadena.
/// @return Retorna el pasajero con los campos cargados.
Passenger* Passenger_newParametros(char* idStr,char* nombreStr,char* codigoStr, char* apellidoStr, char* precioStr, char* tipoPasajeroStr, char* statusFlightStr);
/// @brief Para eliminar el pasajero.
///
/// @param Un pasajero solo.
void Passenger_delete(Passenger* this);

/// @brief Set de id.
///
/// @param this Un pasajero solo.
/// @param id El id a setear.
/// @return Valida si se pudo setear o no.
int Passenger_setId(Passenger* this,int id);
/// @brief Get de id.
///
/// @param this Un pasajero solo.
/// @param id El id a getear.
/// @return Valida si se pudo getear o no.
int Passenger_getId(Passenger* this,int* id);

/// @brief Set de nombre.
///
/// @param this Un pasajero solo.
/// @param nombre El nombre a setear.
/// @return Valida si se pudo setear o no.
int Passenger_setNombre(Passenger* this,char* nombre);
/// @brief Get de nombre.
///
/// @param this Un pasajero solo.
/// @param nombre El nombre a getear.
/// @return Valida si se pudo getear o no.
int Passenger_getNombre(Passenger* this,char* nombre);

/// @brief Set de apellido.
///
/// @param this Un pasajero solo.
/// @param apellido El apellido a getear.
/// @return Valida si se pudo setear o no.
int Passenger_setApellido(Passenger* this,char* apellido);
/// @brief Get de apellido.
///
/// @param this Un pasajero solo.
/// @param apellido El apellido a getear.
/// @return Valida si se pudo getear o no.
int Passenger_getApellido(Passenger* this,char* apellido);

int Passenger_setCodigoVuelo(Passenger* this,char* codigoVuelo);
int Passenger_getCodigoVuelo(Passenger* this,char* codigoVuelo);

int Passenger_setTipoPasajero(Passenger* this,char* tipoPasajero);
int Passenger_getTipoPasajero(Passenger* this,char* tipoPasajero);

int Passenger_setPrecio(Passenger* this,float precio);
int Passenger_getPrecio(Passenger* this,float* precio);

int Passenger_setEstadoVuelo(Passenger* this,char* estadoVuelo);
int Passenger_getEstadoVuelo(Passenger* this,char* estadoVuelo);

void printPassenger(Passenger* unPasajero);
int printPassengerList(LinkedList* listaPasajeros);

int validarGets(Passenger* unPasajero, int* id, char* nombre, char* apellido, char* codigoVuelo, float* precio, char* tipoPasajero, char* estadoVuelo);
int validarSets(Passenger* unPasajero, int id, char* nombre, char* apellido, char* codigoVuelo, float precio, char* tipoPasajero, char* estadoVuelo);

int ObtenerMayorId(LinkedList* lista);
int buscarId(LinkedList* listaPasajeros, int id);

int addPassenger(LinkedList* listaPasajeros, int* id);
int removePassenger(LinkedList* listaPasajeros);
int modifyPassenger(LinkedList* listaPasajeros);

int caseNombre(LinkedList* listaPasajeros, int index, Passenger auxiliar);
int modifyNombre(LinkedList* listaPasajeros, int index, char* nombreAuxiliar);

int caseApellido(LinkedList* listaPasajeros, int index, Passenger auxiliar);
int modifyApellido(LinkedList* listaPasajeros, int index, char* apellidoAuxiliar);

int caseCodigoVuelo(LinkedList* listaPasajeros, int index, Passenger auxiliar);
int modifyCodigoVuelo(LinkedList* listaPasajeros, int index, char* codigoVueloAuxiliar);

int casePrecio(LinkedList* listaPasajeros, int index, Passenger auxiliar);
int modifyPrecio(LinkedList* listaPasajeros, int index, float precioAuxiliar);

int caseTipoPasajero(LinkedList* listaPasajeros, int index, Passenger auxiliar);
int modifyTipoPasajero(LinkedList* listaPasajeros, int index, char* tipoPasajeroAuxiliar);

int ordenarPorId(void* unPasajero, void* otroPasajero);
int ordenarPorNombre(void* unPasajero, void* otroPasajero);
int ordenarPorApellido(void* unPasajero, void* otroPasajero);

#endif /* PASSENGER_H_ */
